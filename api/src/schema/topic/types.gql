type Topic {
  _id: String!
  name: String!
  # children: [IS_PART_OF!]!
  # parents: [IS_PART_OF!]!
  # amosGames: [FOR_TOPIC!]!
  getChildrenRec (level: Int!): [Path!]!
  getMostCommonPrerequisites: [String!]!
  getTopResources: [Resource!]!
  createLink (name: String!): String!
}

type IS_PART_OF @relation (name: "IS_PART_OF") {
  from: Topic!
  to: Topic!
}

input CreateTopicInput {
  name: String!
  children: [String!]!
  parents: [String!]!
}

type Path {
  list: [String!]!
}

type AutocompleteResult {
  name: String!
  topic: Topic!
}

extend type Query {
  # TODO: Change to [Path!]!
  topic (name: String!): Topic!
  autocomplete (string: String!, first: Int): [AutocompleteResult!]!
}

extend type Mutation {
  # createTopic (input: CreateTopicInput!): Topic! @hasRole (roles: [ADMIN])
  createTopic (name: String!, names: [String!]!, _id: String): Topic!
}